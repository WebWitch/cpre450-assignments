module AuctionApp
{
    exception NoAuctionException {
        string msg;
    };

    exception DoubleAuctionException {
        string msg;
    };

    exception NoBidException {
        string msg;
    };

    exception NotAuthorizedException {
        string msg;
    };

    exception LowBidException {
        string msg;
    };

    enum AuctionState {
        Closed,
        Open
    };

    typedef struct AuctionStatus {
        string ownerId;
        string description;
        AuctionState state;
        long bid;
    } BuyerStatus;

    typedef struct BidOffer {
        string bidderId;
        long value;
    } Bid;

    typedef struct SellerAuctionStatus {
        string ownerId;
        string description;
        AuctionState state;
        Bid highestBid;
        long minBid;
    } SellerStatus;

    interface Auction {
        SellerStatus OfferItem(in string userId, in string description, in long initialCost)
            raises (DoubleAuctionException);
        Bid SellItem(in string userId)
            raises (NoBidException, NotAuthorizedException);
        BuyerStatus PlaceBid(in string bidderId, in long bidPrice)
            raises (NoAuctionException, LowBidException);
        SellerStatus GetSellerAuctionStatus()
            raises (NoAuctionException);
        boolean AmIWinning(in string userId)
            raises (NoAuctionException);
        BuyerStatus GetBuyerAuctionStatus()
            raises (NoAuctionException);
    };
};